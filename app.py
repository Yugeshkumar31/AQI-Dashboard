# app.py - Dash web application for AQI Dashboard (enhanced)
import os
from flask import Flask, send_from_directory
import dash
from dash import dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px
from data_processing import DataProcessor

server = Flask(__name__, static_folder='assets')
app = dash.Dash(__name__, server=server, external_stylesheets=[dbc.themes.BOOTSTRAP])

dp = DataProcessor(data_path='data/city_day.csv', coords_path='data/city_coords.csv')
dp.load_and_process()
cities = sorted(dp.city_list)
pollutants = dp.available_pollutants()

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H2('AQI Monitoring Dashboard — India'), width=8),
        dbc.Col(dbc.Button('Refresh data & map', id='refresh-btn', color='secondary'), width=4, style={'textAlign':'right'})
    ], align='center', className='my-2'),
    dbc.Row([
        dbc.Col([
            html.Label('Choose city:'),
            dcc.Dropdown(id='city-dropdown', options=[{'label':c, 'value':c} for c in cities], value=cities[0]),
            html.Br(),
            html.Label('Choose pollutant:'),
            dcc.Dropdown(id='pollutant-dropdown', options=[{'label':p, 'value':p} for p in pollutants], value='AQI'),
            html.Br(),
            html.Label('Select year range:'),
            dcc.RangeSlider(id='year-range', min=min(dp.years), max=max(dp.years), step=1,
                            value=[min(dp.years), max(dp.years)],
                            marks={y: str(y) for y in dp.years}),
            html.Br(),
            dbc.Button('Show City Details', id='show-city', color='primary', className='me-2'),
            dbc.Button('Download CSV', id='download-btn', color='info'),
            dcc.Download(id='download-data'),
            html.Div(id='city-stats', className='mt-3')
        ], width=3),

        dbc.Col([
            dcc.Tabs(id='tabs', value='tab-trend', children=[
                dcc.Tab(label='Time Series & Prediction', value='tab-trend'),
                dcc.Tab(label='Compare Cities', value='tab-compare'),
                dcc.Tab(label='Map (Folium)', value='tab-map'),
                dcc.Tab(label='Other Visualizations', value='tab-other')
            ]),
            html.Div(id='tab-content')
        ], width=9)
    ]),
    html.Hr(),
    html.Footer('AQI Dashboard — generated by your local machine', style={'textAlign':'center','padding':'10px'})
], fluid=True)

@app.callback(
    Output('tab-content', 'children'),
    Input('tabs', 'value'),
    State('city-dropdown', 'value'),
    State('pollutant-dropdown', 'value'),
    State('year-range', 'value')
)
def render_tab(tab, city, pollutant, year_range):
    y0, y1 = year_range
    if tab == 'tab-trend':
        df = dp.get_city_series(city, pollutant, start_year=y0, end_year=y1)
        title = f'{pollutant} — {city} ({y0} to {y1})'
        if df.empty:
            return html.Div('No data for this selection.')
        fig = px.line(df, x='Year', y=pollutant, title=title, markers=True)
        # prediction
        preds = dp.predict_city_advanced(city, pollutant, years_ahead=5)
        if preds is not None:
            fig.add_scatter(x=preds['Year'], y=preds['Predicted'], mode='lines+markers', name='Prediction', line=dict(dash='dash'))
        return dcc.Graph(figure=fig)
    elif tab == 'tab-compare':
        # compare top 15 cities by pollutant average within selected range (use mid-year)
        comp = dp.get_top_cities_range(pollutant, y0, y1, top_n=15)
        if comp.empty:
            return html.Div('No data for this selection.')
        fig = px.bar(comp, x='City', y=pollutant, title=f'Top 15 cities by avg {pollutant} ({y0}-{y1})')
        return dcc.Graph(figure=fig)
    elif tab == 'tab-map':
        map_path = '/assets/map.html'
        return html.Iframe(src=map_path, style={'width':'100%', 'height':'600px', 'border':'none'})
    else:
        bucket_df = dp.get_aqi_bucket_counts()
        fig = px.pie(bucket_df, names='AQI_Bucket', values='Count', title='AQI Bucket Distribution (All data)')
        return dcc.Graph(figure=fig)

@app.callback(
    Output('city-stats', 'children'),
    Input('show-city', 'n_clicks'),
    State('city-dropdown', 'value'),
    State('pollutant-dropdown', 'value'),
    State('year-range', 'value'),
)
def show_city(n, city, pollutant, year_range):
    if not n:
        return ''
    y0,y1 = year_range
    info = dp.get_city_overview(city, pollutant=pollutant, start_year=y0, end_year=y1)
    cards = []
    cards.append(dbc.Card([
        dbc.CardHeader('Avg Value'),
        dbc.CardBody(html.H4(f"{info['Avg']:.2f}" if info['Avg'] is not None else 'N/A'))
    ], className='mb-2'))
    cards.append(dbc.Card([
        dbc.CardHeader('Available Years'),
        dbc.CardBody(html.Div(f"{info.get('MinYear','N/A')} - {info.get('MaxYear','N/A')}" ))
    ], className='mb-2'))
    return dbc.Row([dbc.Col(c, width=6) for c in cards])

@app.callback(
    Output('download-data', 'data'),
    Input('download-btn', 'n_clicks'),
    State('city-dropdown', 'value'),
    State('pollutant-dropdown', 'value'),
    State('year-range', 'value'),
    prevent_initial_call=True
)
def download_csv(n, city, pollutant, year_range):
    y0,y1 = year_range
    df = dp.get_city_series(city, pollutant, start_year=y0, end_year=y1)
    return dcc.send_data_frame(df.to_csv, filename=f"{city}_{pollutant}_{y0}_{y1}.csv", index=False)

# serve static map file
@server.route('/assets/<path:path>')
def serve_asset(path):
    return send_from_directory('assets', path)

if __name__ == '__main__':
    app.run(debug=True, port=8050)
